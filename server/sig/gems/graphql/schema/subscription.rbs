module GraphQL
  class Schema
    # This class can be extended to create fields on your subscription root.
    #
    # It provides hooks for the different parts of the subscription lifecycle:
    #
    # - `#authorized?`: called before initial subscription and subsequent updates
    # - `#subscribe`: called for the initial subscription
    # - `#update`: called for subsequent update
    #
    # Also, `#unsubscribe` terminates the subscription.
    class Subscription < GraphQL::Schema::Resolver
      extend GraphQL::Schema::Resolver::HasPayloadType

      extend GraphQL::Schema::Member::HasFields

      NO_UPDATE: ::Symbol

      def initialize: (object: untyped object, context: untyped context, field: untyped field) -> void

      def resolve_with_support: (**untyped args) -> untyped

      # Implement the {Resolve} API
      def resolve: (**untyped args) -> untyped

      # Wrap the user-defined `#subscribe` hook
      def resolve_subscribe: (**untyped args) -> untyped

      # The default implementation returns nothing on subscribe.
      # Override it to return an object or
      # `:no_response` to (explicitly) return nothing.
      def subscribe: (?::Hash[untyped, untyped] args) -> :no_response

      # Wrap the user-provided `#update` hook
      def resolve_update: (**untyped args) -> untyped

      # The default implementation returns the root object.
      # Override it to return {NO_UPDATE} if you want to
      # skip updates sometimes. Or override it to return a different object.
      def update: (?::Hash[untyped, untyped] args) -> untyped

      # If an argument is flagged with `loads:` and no object is found for it,
      # remove this subscription (assuming that the object was deleted in the meantime,
      # or that it became inaccessible).
      def load_application_object_failed: (untyped err) -> untyped

      # Call this to halt execution and remove this subscription from the system
      def unsubscribe: () -> untyped

      READING_SCOPE: untyped

      # Call this method to provide a new subscription_scope; OR
      # call it without an argument to get the subscription_scope
      # @param new_scope [Symbol]
      # @param optional [Boolean] If true, then don't require `scope:` to be provided to updates to this subscription.
      # @return [Symbol]
      def self.subscription_scope: (?untyped new_scope, ?optional: bool optional) -> untyped

      def self.subscription_scope_optional?: () -> untyped

      # This is called during initial subscription to get a "name" for this subscription.
      # Later, when `.trigger` is called, this will be called again to build another "name".
      # Any subscribers with matching topic will begin the update flow.
      #
      # The default implementation creates a string using the field name, subscription scope, and argument keys and values.
      # In that implementation, only `.trigger` calls with _exact matches_ result in updates to subscribers.
      #
      # To implement a filtered stream-type subscription flow, override this method to return a string with field name and subscription scope.
      # Then, implement {#update} to compare its arguments to the current `object` and return {NO_UPDATE} when an
      # update should be filtered out.
      #
      # @see {#update} for how to skip updates when an event comes with a matching topic.
      # @param arguments [Hash<String => Object>] The arguments for this topic, in GraphQL-style (camelized strings)
      # @param field [GraphQL::Schema::Field]
      # @param scope [Object, nil] A value corresponding to `.trigger(... scope:)` (for updates) or the `subscription_scope` found in `context` (for initial subscriptions).
      # @return [String] An identifier corresponding to a stream of updates
      def self.topic_for: (arguments: untyped arguments, field: untyped field, scope: untyped scope) -> untyped

      # Overriding Resolver#field_options to include subscription_scope
      def self.field_options: () -> untyped
    end
  end
end
